# Test code for the vmware_cluster_info module.
# Copyright: (c) 2018, Abhijeet Kasurde <akasurde@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- import_role:
    name: prepare_vmware_tests

- &vc_all_data
  name: gather info about all clusters in the given datacenter
  vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    datacenter: "{{ dc1 }}"
  register: all_cluster_result

- &ensure_vc_all_data
  name: ensure info are gathered for all clusters
  assert:
    that:
        - all_cluster_result.clusters
        - not all_cluster_result.changed

- name: ensure info are all defined
  assert:
    that:
      - all_cluster_result.clusters[item].datacenter is defined
      - all_cluster_result.clusters[item].hosts is defined
      - all_cluster_result.clusters[item].enable_ha is defined
      - all_cluster_result.clusters[item].ha_failover_level is defined
      - all_cluster_result.clusters[item].ha_vm_monitoring is defined
      - all_cluster_result.clusters[item].ha_host_monitoring is defined
      - all_cluster_result.clusters[item].ha_admission_control_enabled is defined
      - all_cluster_result.clusters[item].ha_restart_priority is defined
      - all_cluster_result.clusters[item].ha_vm_tools_monitoring is defined
      - all_cluster_result.clusters[item].ha_vm_min_up_time is defined
      - all_cluster_result.clusters[item].ha_vm_max_failures is defined
      - all_cluster_result.clusters[item].ha_vm_max_failure_window is defined
      - all_cluster_result.clusters[item].ha_vm_failure_interval is defined
      - all_cluster_result.clusters[item].enabled_drs is defined
      - all_cluster_result.clusters[item].drs_enable_vm_behavior_overrides is defined
      - all_cluster_result.clusters[item].drs_default_vm_behavior is defined
      - all_cluster_result.clusters[item].drs_vmotion_rate is defined
      - all_cluster_result.clusters[item].enabled_vsan is defined
      - all_cluster_result.clusters[item].vsan_auto_claim_storage is defined
      - all_cluster_result.clusters[item].tags is defined
      - all_cluster_result.clusters[item].resource_summary is defined
      - all_cluster_result.clusters[item].moid is defined
  loop: "{{ all_cluster_result.clusters.keys() }}"

- <<: *vc_all_data
  name: Gather info about all clusters in the given datacenter in check mode
  check_mode: true

- debug: msg=all_cluster_result

- <<: *ensure_vc_all_data
  name: Ensure info is gathered for all clusters in check mode

- &vc_cluster_data
  name: Gather info about the given cluster
  vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    cluster_name: "{{ ccr1 }}"
  register: cluster_result

- &ensure_vc_cluster_data
  name: Ensure info are gathered for the given cluster
  assert:
    that:
        - cluster_result.clusters
        - not cluster_result.changed

- <<: *vc_cluster_data
  name: Gather info about the given cluster in check mode
  check_mode: true

- <<: *ensure_vc_cluster_data
  name: Ensure info is gathered for the given cluster in check mode

- name: Gather info about all clusters in the given datacenter with properties
  vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    datacenter: "{{ dc1 }}"
    schema: vsphere
    properties:
      - name
      - configuration.dasConfig.enabled
      - summary.totalCpu
  register: all_cluster_result

- name: Ensure info are gathered for all clusters with properteis
  assert:
    that:
      - all_cluster_result.clusters
      - all_cluster_result.clusters[item].name == item
      - all_cluster_result.clusters[item].configuration.dasConfig.enabled is defined
      - all_cluster_result.clusters[item].summary.totalCpu is defined
      - not all_cluster_result.changed
  loop: "{{ all_cluster_result.clusters.keys() }}"

- name: Gather info about the given cluster with properties
  vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    cluster_name: "{{ ccr1 }}"
    schema: vsphere
    properties:
      - name
      - configuration.dasConfig.enabled
      - summary.totalCpu
  register: cluster_result

- name: Ensure info are gathered for the given cluster with properties
  assert:
    that:
      - cluster_result.clusters
      - cluster_result.clusters[item].name == item
      - cluster_result.clusters[item].configuration.dasConfig.enabled is defined
      - cluster_result.clusters[item].summary.totalCpu is defined
      - not cluster_result.changed
  loop: "{{ cluster_result.clusters.keys() }}"

# Disabled until we get a fix for https://github.com/ansible-collections/vmware/issues/301
# - import_role:
#    name: prepare_vmware_tests
#   vars:
#    setup_category: true
#    setup_tag: true

# - name: Apply tag to cluster
#   vmware_tag_manager:
#    hostname: "{{ vcenter_hostname }}"
#    username: "{{ vcenter_username }}"
#    password: "{{ vcenter_password }}"
#    validate_certs: false
#    tag_names:
#      - '{{ cluster_category }}:{{ cluster_tag }}'
#    state: present
#    object_name: '{{ ccr1 }}'
#    object_type: ClusterComputeResource

# - name: Get info about cluster
#   vmware_cluster_info:
#    hostname: "{{ vcenter_hostname }}"
#    username: "{{ vcenter_username }}"
#    password: "{{ vcenter_password }}"
#    validate_certs: false
#    show_tag: true
#    cluster_name: "{{ ccr1 }}"
#   register: cluster_info

# - assert:
#    that:
#      - cluster_info is defined
#      - cluster_info.clusters[ccr1].tags is defined

- name: "Prepare a cluster name with character to be URL-encoded"
  vmware.vmware.cluster:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    datacenter_name: "{{ dc1 }}"
    cluster_name: 'Cluster/\%'
    state: present
  register: prepare_cluster_url_encoded_result

- assert:
    that:
      - prepare_cluster_url_encoded_result.changed is sameas true

- name: "Gather information about all datacenter"
  vmware_cluster_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: false
    datacenter: "{{ dc1 }}"
  register: all_cluster_result

- name: "Ensure URL-encoded cluster name"
  assert:
    that:
      - all_cluster_result.clusters['Cluster/\%']
